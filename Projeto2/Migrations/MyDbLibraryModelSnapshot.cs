// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace Projeto2.Migrations
{
    [DbContext(typeof(MyDbLibrary))]
    partial class MyDbLibraryModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<int?>("Noofbooks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Books");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.FacultyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .HasColumnType("longtext");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Maddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Mname")
                        .HasColumnType("longtext");

                    b.Property<int?>("Mno")
                        .HasColumnType("int");

                    b.Property<string>("facultycoll")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("FacultyMember");
                });

            modelBuilder.Entity("Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("address")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Maddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Mname")
                        .HasColumnType("longtext");

                    b.Property<int?>("Mno")
                        .HasColumnType("int");

                    b.Property<string>("Studentcoll")
                        .HasColumnType("longtext");

                    b.Property<string>("sName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Models.GeneralBook", b =>
                {
                    b.HasBaseType("Models.Books");

                    b.HasIndex("LibraryId");

                    b.HasDiscriminator().HasValue("GeneralBook");
                });

            modelBuilder.Entity("Models.ReferenceBook", b =>
                {
                    b.HasBaseType("Models.Books");

                    b.HasIndex("LibraryId");

                    b.HasDiscriminator().HasValue("ReferenceBook");
                });

            modelBuilder.Entity("Models.FacultyMember", b =>
                {
                    b.HasOne("Models.Library", "Library")
                        .WithMany("FacultyMembers")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.HasOne("Models.Library", "Library")
                        .WithMany("Students")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Models.GeneralBook", b =>
                {
                    b.HasOne("Models.Library", "Library")
                        .WithMany("GeneralBooks")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Models.ReferenceBook", b =>
                {
                    b.HasOne("Models.Library", "Library")
                        .WithMany("ReferenceBooks")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Models.Library", b =>
                {
                    b.Navigation("FacultyMembers");

                    b.Navigation("GeneralBooks");

                    b.Navigation("ReferenceBooks");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
